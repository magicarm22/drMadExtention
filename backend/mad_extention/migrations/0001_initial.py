# Generated by Django 3.1.7 on 2021-04-11 20:47

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Bots',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('botname', models.TextField(db_column='botName')),
            ],
            options={
                'db_table': 'Bots',
            },
        ),
        migrations.CreateModel(
            name='Categoryitem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maincategoryname', models.TextField(db_column='mainCategoryName')),
                ('subcategoryname', models.TextField(blank=True, db_column='subCategoryName', null=True)),
                ('itemscanbeused', models.IntegerField(blank=True, db_column='itemsCanBeUsed', null=True)),
            ],
            options={
                'db_table': 'CategoryItem',
            },
        ),
        migrations.CreateModel(
            name='Items',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('itemname', models.TextField(db_column='itemName')),
                ('pz', models.IntegerField()),
                ('pa', models.IntegerField()),
                ('py', models.IntegerField()),
                ('cost', models.IntegerField(blank=True, null=True)),
                ('shopchance', models.FloatField(blank=True, db_column='shopChance', null=True)),
                ('fragility', models.IntegerField(blank=True, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mad_extention.categoryitem')),
            ],
            options={
                'db_table': 'Items',
            },
        ),
        migrations.CreateModel(
            name='Levels',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('levelname', models.TextField(db_column='levelName')),
                ('minenergy', models.IntegerField(db_column='minEnergy')),
                ('maxenergy', models.IntegerField(db_column='maxEnergy')),
                ('class_field', models.TextField(blank=True, db_column='class', null=True)),
            ],
            options={
                'db_table': 'Levels',
            },
        ),
        migrations.CreateModel(
            name='Raids',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locationname', models.TextField(db_column='locationName')),
                ('pz', models.IntegerField()),
                ('pa', models.IntegerField()),
                ('loot', models.TextField(blank=True, null=True)),
                ('time', models.IntegerField()),
                ('minuserpa', models.IntegerField(blank=True, db_column='minUserPA', null=True)),
                ('minpills', models.IntegerField(blank=True, db_column='minPills', null=True)),
                ('maxpills', models.IntegerField(blank=True, db_column='maxPills', null=True)),
                ('tiercert', models.IntegerField(blank=True, db_column='tierCert', null=True)),
            ],
            options={
                'db_table': 'Raids',
            },
        ),
        migrations.CreateModel(
            name='Raidtime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lastraidstime', models.DateTimeField(db_column='lastRaidsTime')),
                ('israidtime', models.BooleanField(blank=True, db_column='isRaidTime', null=True)),
            ],
            options={
                'db_table': 'RaidTime',
            },
        ),
        migrations.CreateModel(
            name='Streams',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('streamname', models.TextField(blank=True, db_column='streamName', null=True)),
                ('startedat', models.DateTimeField(blank=True, db_column='startedAt', null=True)),
                ('endedat', models.DateTimeField(blank=True, db_column='endedAt', null=True)),
            ],
            options={
                'db_table': 'Streams',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('nickname', models.TextField(blank=True, null=True, unique=True)),
                ('lastmessage', models.DateTimeField(blank=True, db_column='lastMessage', null=True)),
                ('lasttimein', models.DateTimeField(blank=True, db_column='lastTimeIn', null=True)),
                ('timecount', models.IntegerField(blank=True, db_column='timeCount', null=True)),
                ('pills', models.FloatField(blank=True, null=True)),
                ('messagescount', models.IntegerField(db_column='messagesCount')),
                ('energy', models.IntegerField()),
                ('ishealthzero', models.BooleanField(blank=True, db_column='isHealthZero', null=True)),
                ('countraids', models.IntegerField(blank=True, db_column='countRaids', null=True)),
                ('countcert', models.IntegerField(blank=True, db_column='countCert', null=True)),
                ('pz', models.IntegerField(blank=True, null=True)),
                ('pa', models.IntegerField(blank=True, null=True)),
                ('py', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'User',
            },
        ),
        migrations.CreateModel(
            name='Trade',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('price', models.IntegerField()),
                ('tradetime', models.DateTimeField(db_column='tradeTime')),
                ('fromuser', models.ForeignKey(db_column='fromUser', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mad_extention.user')),
                ('item', models.ForeignKey(db_column='item', on_delete=django.db.models.deletion.DO_NOTHING, to='mad_extention.items')),
                ('touser', models.ForeignKey(db_column='toUser', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mad_extention.user')),
            ],
            options={
                'db_table': 'Trade',
            },
        ),
        migrations.CreateModel(
            name='Shop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lastchanges', models.DateTimeField(db_column='lastChanges')),
                ('currentitem1', models.ForeignKey(blank=True, db_column='currentItem1', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mad_extention.items')),
                ('currentitem2', models.ForeignKey(blank=True, db_column='currentItem2', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mad_extention.items')),
                ('currentitem3', models.ForeignKey(blank=True, db_column='currentItem3', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mad_extention.items')),
                ('currentitem4', models.ForeignKey(blank=True, db_column='currentItem4', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mad_extention.items')),
                ('currentitem5', models.ForeignKey(blank=True, db_column='currentItem5', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mad_extention.items')),
            ],
            options={
                'db_table': 'Shop',
            },
        ),
        migrations.CreateModel(
            name='Raidparty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('countplayer', models.IntegerField(blank=True, db_column='countPlayer', null=True)),
                ('partycreated', models.DateTimeField(blank=True, db_column='partyCreated', null=True)),
                ('israidstarted', models.BooleanField(db_column='isRaidStarted')),
                ('raidended', models.DateTimeField(blank=True, db_column='raidEnded', null=True)),
                ('player1', models.ForeignKey(blank=True, db_column='player1', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mad_extention.user')),
                ('player2', models.ForeignKey(blank=True, db_column='player2', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mad_extention.user')),
                ('player3', models.ForeignKey(blank=True, db_column='player3', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mad_extention.user')),
                ('player4', models.ForeignKey(blank=True, db_column='player4', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='mad_extention.user')),
                ('raidid', models.ForeignKey(blank=True, db_column='raidId', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mad_extention.raids')),
            ],
            options={
                'db_table': 'RaidParty',
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField()),
                ('inuse', models.BooleanField(db_column='inUse')),
                ('currentfragility', models.IntegerField(blank=True, db_column='currentFragility', null=True)),
                ('itemid', models.ForeignKey(db_column='itemId', on_delete=django.db.models.deletion.DO_NOTHING, to='mad_extention.items')),
                ('userid', models.ForeignKey(db_column='userId', on_delete=django.db.models.deletion.DO_NOTHING, to='mad_extention.user')),
            ],
            options={
                'db_table': 'Inventory',
            },
        ),
        migrations.CreateModel(
            name='Injection',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('lastinjectiontime', models.DateTimeField(blank=True, db_column='lastInjectionTime', null=True)),
                ('counttimes', models.IntegerField(blank=True, db_column='countTimes', null=True)),
                ('endinjectiontime', models.DateTimeField(blank=True, db_column='endInjectionTime', null=True)),
                ('beforelastinjectiontime', models.DateTimeField(blank=True, db_column='beforeLastInjectionTime', null=True)),
                ('userid', models.OneToOneField(db_column='userId', on_delete=django.db.models.deletion.DO_NOTHING, to='mad_extention.user')),
            ],
            options={
                'db_table': 'Injection',
            },
        ),
        migrations.CreateModel(
            name='Feedbacks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback', models.TextField(blank=True, null=True)),
                ('timecreated', models.DateTimeField(blank=True, db_column='timeCreated', null=True)),
                ('author', models.ForeignKey(blank=True, db_column='author', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mad_extention.user')),
            ],
            options={
                'db_table': 'Feedbacks',
            },
        ),
    ]
